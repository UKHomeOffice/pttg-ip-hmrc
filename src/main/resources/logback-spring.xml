<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="false">

    <include resource="org/springframework/boot/logging/logback/base.xml"/>

    <springProperty scope="context" name="appName" source="info.app.name"/>
    <springProperty scope="context" name="appVersion" source="info.app.version"/>

    <springProfile name="logtoconsole">
        <!--This appender is used when logging may include a NINO - NINOs must not be logged in full-->
        <appender name="applicationAppender" class="ch.qos.logback.core.ConsoleAppender">
            <layout class="ch.qos.logback.classic.PatternLayout">
                <Pattern>%replace(${CONSOLE_LOG_PATTERN}){'([A-Za-z]\\s*[A-Za-z]\\s*[0-9]\\s*[0-9]\\s*[0-9]\\s*)[0-9]\\s*[0-9]\\s*[0-9]\\s*[A-Da-d]','$1****'}</Pattern>
            </layout>
        </appender>

        <appender name="thirdPartyAppender" class="ch.qos.logback.core.ConsoleAppender">
            <layout class="ch.qos.logback.classic.PatternLayout">
                <Pattern>%replace(${CONSOLE_LOG_PATTERN}){'([A-Za-z]\\s*[A-Za-z]\\s*[0-9]\\s*[0-9]\\s*[0-9]\\s*)[0-9]\\s*[0-9]\\s*[0-9]\\s*[A-Da-d]','$1****'}</Pattern>
            </layout>
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>ERROR</level>
                <onMatch>DENY</onMatch>
                <onMismatch>NEUTRAL</onMismatch>
            </filter>
        </appender>

        <appender name="thirdPartyErrorAppender" class="ch.qos.logback.core.ConsoleAppender">
            <layout class="ch.qos.logback.classic.PatternLayout">
                <Pattern>%replace(${CONSOLE_LOG_PATTERN}){'([A-Za-z]\\s*[A-Za-z]\\s*[0-9]\\s*[0-9]\\s*[0-9]\\s*)[0-9]\\s*[0-9]\\s*[0-9]\\s*[A-Da-d]','$1****'}</Pattern>
            </layout>
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>ERROR</level>
            </filter>
        </appender>
    </springProfile>

    <springProfile name="!logtoconsole">
        <!--This appender is used when logging may include a NINO - NINOs must not be logged in full-->
        <appender name="applicationAppender" class="ch.qos.logback.core.ConsoleAppender">
            <encoder class="net.logstash.logback.encoder.LogstashEncoder">
                <includeCallerInfo>true</includeCallerInfo>
                <fieldNames>
                    <!-- Do not output the standard message field.  It will be output by the pattern provider below -->
                    <message>[ignore]</message>
                </fieldNames>
                <provider class="net.logstash.logback.composite.loggingevent.LoggingEventPatternJsonProvider">
                    <pattern>
                        {
                        "timestamp" : "%date{\"yyyy-MM-dd'T'HH:mm:ss,SSSXXX\", UTC}",
                        "thread"    : "%thread",
                        "subsystem" : "${appName}",
                        "logger"    : "%logger{50}",
                        "exception" : "%exception",
                        "message": "%replace(%msg){'([A-Za-z]\\s*[A-Za-z]\\s*[0-9]\\s*[0-9]\\s*[0-9]\\s*)[0-9]\\s*[0-9]\\s*[0-9]\\s*[A-Da-d]','$1****'}"
                        }
                    </pattern>
                </provider>
            </encoder>
        </appender>

        <appender name="thirdPartyAppender" class="ch.qos.logback.core.ConsoleAppender">
            <encoder class="net.logstash.logback.encoder.LogstashEncoder">
                <includeCallerInfo>true</includeCallerInfo>
                <fieldNames>
                    <!-- Do not output the standard message field.  It will be output by the pattern provider below -->
                    <message>[ignore]</message>
                </fieldNames>
                <provider class="net.logstash.logback.composite.loggingevent.LoggingEventPatternJsonProvider">
                    <pattern>
                        {
                        "thread"    : "%thread",
                        "subsystem" : "${appName}",
                        "logger"    : "%logger{50}",
                        "exception" : "%exception",
                        "message": "%replace(%msg){'([A-Za-z]\\s*[A-Za-z]\\s*[0-9]\\s*[0-9]\\s*[0-9]\\s*)[0-9]\\s*[0-9]\\s*[0-9]\\s*[A-Da-d]','$1****'}"
                        }
                    </pattern>
                </provider>
            </encoder>
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>ERROR</level>
                <onMatch>DENY</onMatch>
                <onMismatch>NEUTRAL</onMismatch>
            </filter>

        </appender>

        <appender name="thirdPartyErrorAppender" class="ch.qos.logback.core.ConsoleAppender">
            <encoder class="net.logstash.logback.encoder.LogstashEncoder">
                <includeCallerInfo>true</includeCallerInfo>
                <fieldNames>
                    <!-- Do not output the standard message field.  It will be output by the pattern provider below -->
                    <message>[ignore]</message>
                </fieldNames>
                <provider class="net.logstash.logback.composite.loggingevent.LoggingEventPatternJsonProvider">
                    <pattern>
                        {
                        "timestamp" : "%date{\"yyyy-MM-dd'T'HH:mm:ss,SSSXXX\", UTC}",
                        "thread" : "%thread",
                        "subsystem" : "${appName}",
                        "logger" : "%logger{50}",
                        "exception" : "%exception",
                        "message": "%replace(%msg){'([A-Za-z]\\s*[A-Za-z]\\s*[0-9]\\s*[0-9]\\s*[0-9]\\s*)[0-9]\\s*[0-9]\\s*[0-9]\\s*[A-Da-d]','$1****'}",
                        "event_id": "THIRD_PARTY_ERROR"
                        }
                    </pattern>
                </provider>
            </encoder>
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>ERROR</level>
            </filter>
        </appender>
    </springProfile>

    <logger name="org.eclipse.jetty" additivity="false" level="WARN">
        <appender-ref ref="thirdPartyAppender"/>
        <appender-ref ref="thirdPartyErrorAppender" />
    </logger>
    <logger name="org.springframework" additivity="false" level="INFO">
        <appender-ref ref="thirdPartyAppender"/>
        <appender-ref ref="thirdPartyErrorAppender" />
    </logger>

    <logger name="org.hibernate" additivity="false" level="WARN">
        <appender-ref ref="thirdPartyAppender"/>
        <appender-ref ref="thirdPartyErrorAppender" />
    </logger>

    <!--This logger _must_ use the applicationAppender - NINOs must be hidden in logs-->
    <logger name="uk.gov" additivity="false" level="INFO">
        <appender-ref ref="applicationAppender"/>
    </logger>

    <root level="INFO">
        <appender-ref ref="thirdPartyAppender"/>
        <appender-ref ref="thirdPartyErrorAppender" />
    </root>

</configuration>